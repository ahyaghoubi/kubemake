---
- name: Install packages needed to use community.kubernetes collection
  block:
  - name: Install python3-pip
    apt:
      name: python3-pip
      state: present
      update_cache: yes

  - name: Install kubernetes Python package
    apt:
      name: python3-kubernetes
      state: present
      update_cache: yes

- name: Populate service facts
  service_facts:

- name: Ensure kubelet is not running
  service_facts:
  until:
  - ansible_facts['services']['kubelet.service']['state'] != 'running'
  retries: 2
  delay: 5
  failed_when: false

- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

- name: Initialize the K8s cluster
  shell: >
    kubeadm init 
    --apiserver-advertise-address={{ apiserver_advertise_address }} 
    --pod-network-cidr={{ pod_network_cidr }}
    --ignore-preflight-errors=NumCPU
  when:
    - not k8s_admin_conf.stat.exists
  register: kubeadm_init
  failed_when: kubeadm_init.rc != 0

- name: Create ~/.kube directory
  become: false
  file:
    path: $HOME/.kube
    state: directory

- name: Copy K8s config file in ~/.kube
  copy:
    src: /etc/kubernetes/admin.conf
    remote_src: yes
    dest: "{{ ansible_user_dir }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user if ansible_user != 'root' else 'root' }}"

- name: Set --node-ip for kubelet
  lineinfile:
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: '^Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"'
    line: 'Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --node-ip={{ kubelet_node_ip }}"'

- name: Restart service kubelet
  systemd:
    daemon_reload: yes
    name: kubelet
    state: restarted

- name: Wait for Kubernetes API to be ready
  wait_for:
    port: 6443
    host: "{{ apiserver_advertise_address }}"
    timeout: 300

- name: Untaint master node for single-node cluster
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: cluster_nodes

- name: Remove master taint if only one node
  shell: kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
  when: 
    - cluster_nodes.resources | length == 1
    - groups['workers'] | length == 0
